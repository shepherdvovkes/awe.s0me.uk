#!/usr/bin/env node

const sqlite3 = require('sqlite3').verbose();
const crypto = require('crypto');

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
const db = new sqlite3.Database('./terminal_data.db');

console.log('üîê Retro Terminal Users Database');
console.log('================================\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞—Ä–æ–ª—è (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
function hashPassword(password) {
    return crypto.createHash('sha256').update(password).digest('hex');
}

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
db.all(`
    SELECT 
        id,
        ip_address,
        username,
        password_hash,
        is_admin,
        session_token,
        last_login,
        created_at
    FROM users 
    ORDER BY created_at DESC
`, [], (err, rows) => {
    if (err) {
        console.error('‚ùå Error reading database:', err.message);
        return;
    }

    if (rows.length === 0) {
        console.log('üì≠ No users found in database');
        return;
    }

    console.log(`üë• Found ${rows.length} user(s):\n`);

    rows.forEach((user, index) => {
        console.log(`üìã User #${user.id}:`);
        console.log(`   IP Address: ${user.ip_address}`);
        console.log(`   Username: ${user.username}`);
        console.log(`   Password Hash: ${user.password_hash}`);
        console.log(`   Is Admin: ${user.is_admin ? 'Yes' : 'No'}`);
        console.log(`   Session Token: ${user.session_token ? 'Active' : 'None'}`);
        console.log(`   Last Login: ${user.last_login}`);
        console.log(`   Created: ${user.created_at}`);
        
        // –ü–æ–ø—Ä–æ–±—É–µ–º —É–≥–∞–¥–∞—Ç—å –ø–∞—Ä–æ–ª—å (–¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏)
        const commonPasswords = ['admin123', 'password', '123456', 'admin', 'user'];
        const guessedPassword = commonPasswords.find(pwd => 
            hashPassword(pwd) === user.password_hash
        );
        
        if (guessedPassword) {
            console.log(`   üîç Guessed Password: ${guessedPassword}`);
        }
        
        console.log('');
    });

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const adminCount = rows.filter(u => u.is_admin).length;
    const activeSessions = rows.filter(u => u.session_token).length;
    
    console.log('üìä Statistics:');
    console.log(`   Total Users: ${rows.length}`);
    console.log(`   Admins: ${adminCount}`);
    console.log(`   Active Sessions: ${activeSessions}`);
    console.log(`   Regular Users: ${rows.length - adminCount}`);

    // –ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
    console.log('\nüìã Table Structure:');
    db.get("PRAGMA table_info(users)", [], (err, tableInfo) => {
        if (!err) {
            console.log('   users table columns:');
            console.log('   - id (INTEGER PRIMARY KEY)');
            console.log('   - ip_address (TEXT NOT NULL UNIQUE)');
            console.log('   - username (TEXT NOT NULL)');
            console.log('   - password_hash (TEXT NOT NULL)');
            console.log('   - is_admin (BOOLEAN DEFAULT 0)');
            console.log('   - session_token (TEXT)');
            console.log('   - last_login (DATETIME DEFAULT CURRENT_TIMESTAMP)');
            console.log('   - created_at (DATETIME DEFAULT CURRENT_TIMESTAMP)');
        }
        
        db.close();
    });
});

console.log('üîç Reading user data...\n'); 